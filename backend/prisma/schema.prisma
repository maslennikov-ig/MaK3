// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи и роли
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String // Переименовано из passwordHash для соответствия с кодом
  firstName    String
  lastName     String
  isActive     Boolean  @default(true)
  refreshToken String? // Добавлено для хранения refresh токена
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         String   @default("USER") // Упрощено до строки вместо связи

  // Связи
  assignedContacts Contact[] @relation("AssignedToUser")
  assignedDeals    Deal[]    @relation("AssignedToUser")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  permissions RolePermission[]
}

model Permission {
  id        String   @id @default(uuid())
  action    String // например, create:client, read:deal
  subject   String // например, client, deal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  roles RolePermission[]
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  createdAt    DateTime   @default(now())

  @@id([roleId, permissionId])
}

// Партнеры и франчайзи
model Partner {
  id        String      @id @default(uuid())
  name      String
  type      PartnerType
  email     String?
  phone     String?
  address   String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Связи
  contacts Contact[]
  deals    Deal[]
}

enum PartnerType {
  PARTNER
  FRANCHISEE
}

// Клиенты и лиды (объединены в одну сущность Contact с полем isLead)
model Contact {
  id           String        @id @default(uuid())
  firstName    String
  lastName     String
  middleName   String?
  phone        String        @unique
  email        String?       @unique
  source       ContactSource // Источник контакта (enum)
  statusClient ClientStatus // Статус клиента (enum)
  notes        String?
  isLead       Boolean       @default(true) // true = лид, false = клиент
  historyData  Json? // Для хранения истории изменений в формате JSONB
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Связи
  assignedTo   User?            @relation("AssignedToUser", fields: [assignedToId], references: [id])
  assignedToId String?
  partner      Partner?         @relation(fields: [partnerId], references: [id])
  partnerId    String?
  deals        Deal[]
  history      ContactHistory[] // Связь с историей изменений
  comments     Comment[] // Связь с комментариями
  attachments  Attachment[] // Связь с вложениями
}

// Источники контактов
enum ContactSource {
  PARTNER_LEAD_WITH_HISTORY // Лид от партнера с историей
  PARTNER_LEAD_NO_HISTORY // Лид от партнера без истории
  OWN_LEAD_GEN // Собственная генерация лидов
  COLD_BASE // Холодная база
  EXTERNAL_UPLOAD // Внешняя загрузка
  PURCHASED_BASE // Купленная база
}

// Статусы клиентов
enum ClientStatus {
  NEW_NO_PROCESSING // Новый, без обработки
  PARTNER_LEAD // Лид от партнера
  AUCTION // Аукцион
  NOT_BOUGHT_COMPANY_PROCESSING // Не выкуплен, в обработке компании
  IN_PROGRESS // В работе
  SUCCESSFUL // Успешно завершен
  DECLINED // Отклонен
  ON_HOLD // На удержании
}

// История изменений контактов (опционально, так как история также хранится в JSON поле)
model ContactHistory {
  id        String   @id @default(uuid())
  contact   Contact  @relation(fields: [contactId], references: [id])
  contactId String
  field     String // Измененное поле
  oldValue  String? // Старое значение
  newValue  String? // Новое значение
  changedBy String // ID пользователя, внесшего изменение
  changedAt DateTime @default(now())
}

// Комментарии к контактам
model Comment {
  id        String   @id @default(uuid())
  contact   Contact  @relation(fields: [contactId], references: [id])
  contactId String
  content   String
  createdBy String // ID пользователя, создавшего комментарий
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Вложения к контактам
model Attachment {
  id           String   @id @default(uuid())
  contact      Contact  @relation(fields: [contactId], references: [id])
  contactId    String
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  uploadedBy   String // ID пользователя, загрузившего файл
  uploadedAt   DateTime @default(now())
}

// Сделки и воронки продаж
model Pipeline {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  stages PipelineStage[]
}

model PipelineStage {
  id         String   @id @default(uuid())
  name       String
  order      Int // Для сортировки
  color      String? // Цвет для отображения
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id])
  pipelineId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Связи
  deals Deal[]
}

model Deal {
  id           String        @id @default(uuid())
  title        String
  amount       Decimal?
  description  String?
  stage        PipelineStage @relation(fields: [stageId], references: [id])
  stageId      String
  contact      Contact       @relation(fields: [contactId], references: [id])
  contactId    String
  assignedTo   User?         @relation("AssignedToUser", fields: [assignedToId], references: [id])
  assignedToId String?
  partner      Partner?      @relation(fields: [partnerId], references: [id])
  partnerId    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Связи
  history     DealHistory[]
  comments    DealComment[]
  attachments DealAttachment[]
}

model DealHistory {
  id        String   @id @default(uuid())
  deal      Deal     @relation(fields: [dealId], references: [id])
  dealId    String
  field     String // Измененное поле
  oldValue  String? // Старое значение
  newValue  String? // Новое значение
  changedBy String // ID пользователя, внесшего изменение
  changedAt DateTime @default(now())
}

model DealComment {
  id        String   @id @default(uuid())
  deal      Deal     @relation(fields: [dealId], references: [id])
  dealId    String
  content   String
  createdBy String // ID пользователя, создавшего комментарий
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DealAttachment {
  id           String   @id @default(uuid())
  deal         Deal     @relation(fields: [dealId], references: [id])
  dealId       String
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  uploadedBy   String // ID пользователя, загрузившего файл
  uploadedAt   DateTime @default(now())
}
